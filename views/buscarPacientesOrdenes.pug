extends layout

block content
    .container-fluid
        h1 Buscar Orden de Trabajo


        .form-group
            label(for="searchPaciente") Buscar paciente (DNI, Nombre, Apellido):
            input#searchPaciente.form-control(type="text" placeholder="Escribe para buscar pacientes")


        ul#dropdown-menu.dropdown-menu(style="display: none; position: relative;")

        h2(style="margin-top: 20px;") Órdenes de Trabajo
        div#ordenesResultados(style="margin-top: 20px;")
        

        div#paginacion-container.d-flex.justify-content-center.mt-4


        p#mensaje(style="color: #ff4040; margin-top: 10px;")
        a.btn.btn-secondary.mt-4(href="javascript:history.back()") Volver

    script(src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js")

    script.
        document.addEventListener('DOMContentLoaded', function () {
            const searchPacienteInput = document.getElementById('searchPaciente');
            const dropdownMenu = document.getElementById('dropdown-menu');
            const ordenesResultados = document.getElementById('ordenesResultados');
            const paginacionContainer = document.getElementById('paginacion-container');
            const mensaje = document.getElementById('mensaje');
            let selectedPaciente = null;

            const buscarPacientes = async (query) => {
                try {
                    if (!query) {
                        dropdownMenu.style.display = 'none';
                        return;
                    }
                    const response = await axios.get('/buscar-paciente-dinamico', { params: { query } });
                    const pacientes = response.data;

                    dropdownMenu.innerHTML = ''; 
                    if (pacientes.length > 0) {
                        dropdownMenu.style.display = 'block';
                        pacientes.forEach((paciente) => {
                            const li = document.createElement('li');
                            li.className = 'dropdown-item';
                            li.textContent = `${paciente.nombre} ${paciente.apellido} - DNI: ${paciente.dni}`;
                            li.style.cursor = 'pointer';
                            li.addEventListener('click', () => seleccionarPaciente(paciente));
                            dropdownMenu.appendChild(li);
                        });
                    } else {
                        dropdownMenu.style.display = 'none';
                    }
                } catch (error) {
                    console.error('Error al buscar pacientes:', error);
                }
            };
            
            const seleccionarPaciente = (paciente) => {
                selectedPaciente = paciente;
                dropdownMenu.style.display = 'none';
                searchPacienteInput.value = `${paciente.nombre} ${paciente.apellido} (DNI: ${paciente.dni})`; 
                buscarOrdenes(paciente.id_paciente); 
            };

            const buscarOrdenes = async (idPaciente, page = 1) => {
                if (!idPaciente) return;
                try {
                    const response = await axios.post('/buscarOrdenes/buscar-ordenes', { idPaciente: idPaciente, page: page });
                    const { ordenes, totalPages } = response.data;
                    
                    mensaje.textContent = '';
                    ordenesResultados.innerHTML = '';
                    
                    if (ordenes.length > 0) {
                        ordenes.forEach((orden) => {
                            const ordenDiv = document.createElement('div');
                            ordenDiv.classList.add('card', 'mb-3');
                            ordenDiv.innerHTML = `
                                <div class="card-header">
                                    Orden #${orden.id_Orden} - <strong>Diagnóstico:</strong> ${orden.diagnostico || 'No especificado'}
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title">Estado: ${orden.estado}</h5>
                                    <p class="card-text">Fecha de Creación: ${new Date(orden.Fecha_Creacion).toLocaleDateString()}</p>
                                    <p class="card-text">Fecha de Entrega: ${new Date(orden.Fecha_Entrega).toLocaleDateString()}</p>
                                    <a href="/buscarOrdenes/crear-modificar-orden/${orden.id_Orden}" class="btn btn-secondary">Modificar Orden</a>
                                    <a href="/orden/muestras/ver/${orden.id_Orden}" class="btn ms-2" style="background-color: #25254eff; border-color: #25254eff; color: white;">Ver Muestras</a>
                                </div>
                            `;
                            ordenesResultados.appendChild(ordenDiv);
                        });
                        
                        renderPaginacion(totalPages, page);

                    } else {
                        ordenesResultados.innerHTML = `<p>No se encontraron órdenes para el paciente seleccionado.</p>`;
                        paginacionContainer.innerHTML = '';
                    }
                } catch (error) {
                    console.error('Error al buscar órdenes:', error);
                    mensaje.textContent = 'Error al buscar órdenes.';
                }
            };

            const renderPaginacion = (totalPages, currentPage) => {
                paginacionContainer.innerHTML = '';
                if (totalPages <= 1) return;

                const nav = document.createElement('nav');
                const ul = document.createElement('ul');
                ul.className = 'pagination';

                for (let i = 1; i <= totalPages; i++) {
                    const li = document.createElement('li');
                    li.className = 'page-item';
                    if (i === currentPage) {
                        li.classList.add('active');
                    }

                    const a = document.createElement('a');
                    a.className = 'page-link';
                    a.href = '#';
                    a.textContent = i;
                    a.addEventListener('click', (e) => {
                        e.preventDefault();
                        if (selectedPaciente) {
                            buscarOrdenes(selectedPaciente.id_paciente, i);
                        }
                    });

                    li.appendChild(a);
                    ul.appendChild(li);
                }

                nav.appendChild(ul);
                paginacionContainer.appendChild(nav);
            };

            searchPacienteInput.addEventListener('input', (e) => buscarPacientes(e.target.value.trim()));
        });