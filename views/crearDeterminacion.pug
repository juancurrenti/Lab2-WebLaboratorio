extends layout

block content


  .container-fluid
    h1 Gestión de Determinaciones


    .alert#messageContainer(role="alert" style="display: none;")


    if idExamenSeleccionado && nombreExamenSeleccionado
      .alert.alert-primary.mt-3
        strong Examen seleccionado:
        |  #{nombreExamenSeleccionado}


    .form-group.mt-3
      label(for="search_examen") Buscar Examen:
      input#search_examen.form-control(type="text" placeholder="Escribe para buscar un examen..." autocomplete="off")
      ul#examen_suggestions.list-group.mt-2


    .mt-4
      h3#determinationTitle.hidden Determinaciones para el examen seleccionado:
      p#noDeterminations.hidden No existen determinaciones para el examen seleccionado.

      table.table.table-bordered.hidden#determinationsTable
        thead
          tr
            th Nombre de la Determinación
            th Unidad de Medida
            th Estado
            th Acción
        tbody#determinationsBody

    button.btn.btn-primary.hidden#addDetermination(type="button") Añadir Nueva Determinación
    button.btn.btn-success.hidden#saveDeterminations.ms-2(type="button") Guardar Determinaciones
    a.btn.btn-secondary.ms-2(href="javascript:history.back()") Volver

    .modal.fade#confirmationModal(tabindex="-1" role="dialog" aria-hidden="true")
      .modal-dialog(role="document")
        .modal-content
          .modal-header
            h5.modal-title Confirmación de Datos
            button.btn-close(type="button" data-bs-dismiss="modal" aria-label="Close")
          .modal-body
            p#modalContent Aquí aparecerán los datos a enviar.
          .modal-footer
            button.btn.btn-secondary(type="button" data-bs-dismiss="modal") Cancelar
            button.btn.btn-primary(type="button" id="confirmSubmit") Confirmar


    .modal.fade#deleteModal(tabindex="-1" role="dialog" aria-hidden="true")
      .modal-dialog(role="document")
        .modal-content
          .modal-header
            h5.modal-title Confirmar Eliminación
            button.btn-close(type="button" data-bs-dismiss="modal" aria-label="Close")
          .modal-body
            p#deleteContent ¿Estás seguro de que deseas eliminar esta determinación?
          .modal-footer
            button.btn.btn-secondary(type="button" data-bs-dismiss="modal") Cancelar
            button.btn.btn-danger(type="button" id="confirmDelete") Confirmar Eliminación


  script.
    document.addEventListener('DOMContentLoaded', function() {

      const examenes = !{JSON.stringify(examenes)};
      const determinaciones = !{JSON.stringify(determinaciones)};
      const unidadesMedida = !{JSON.stringify(unidadesMedida)};
      let idExamenSeleccionado = !{JSON.stringify(idExamenSeleccionado || null)};

      const searchInput = document.getElementById("search_examen");
      const suggestionsList = document.getElementById("examen_suggestions");
      const determinationTitle = document.getElementById("determinationTitle");
      const noDeterminations = document.getElementById("noDeterminations");
      const determinationsTable = document.getElementById("determinationsTable");
      const determinationsBody = document.getElementById("determinationsBody");
      const addDeterminationButton = document.getElementById("addDetermination");
      const saveDeterminationsButton = document.getElementById("saveDeterminations");
      const messageContainer = document.getElementById('messageContainer');
      const deleteModal = document.getElementById("deleteModal");
      const deleteContent = document.getElementById("deleteContent");
      const confirmDeleteButton = document.getElementById("confirmDelete");
      
      let currentUnits = [];
      let currentDeterminations = [];
      let determinationToDelete = null;



      function addDeterminationRow(determination = {}) {
        const tr = document.createElement("tr");
        const unidadOptions = currentUnits.map(um => `
          <option value="${um.id_UnidadMedida}" ${um.id_UnidadMedida == determination.Unidad_Medida ? "selected" : ""}>
            ${um.nombreUnidadMedida}
          </option>
        `).join("");
        tr.dataset.id = determination.id_Determinacion || "";
        tr.innerHTML = `
          <td><input type="text" class="form-control" value="${determination.Nombre_Determinacion || ''}" name="Nombre_Determinacion" required></td>
          <td>
            <select class="form-control" name="Unidad_Medida" required>
              <option value="" disabled ${!determination.Unidad_Medida ? 'selected' : ''}>Selecciona una unidad</option>
              ${unidadOptions}
            </select>
          </td>
          <td>
            <select class="form-control" name="estado" required>
              <option value="" disabled ${determination.estado === undefined ? 'selected' : ''}>Selecciona un estado</option>
              <option value="1" ${determination.estado === 1 ? 'selected' : ''}>Activo</option>
              <option value="0" ${determination.estado === 0 ? 'selected' : ''}>Inactivo</option>
            </select>
          </td>
          <td><button type="button" class="btn btn-danger btn-sm remove-determination">Eliminar</button></td>
        `;

        tr.querySelector(".remove-determination").addEventListener("click", () => {
          if (tr.dataset.id) {
            determinationToDelete = tr;
            deleteContent.textContent = `¿Estás seguro de eliminar la determinación "${determination.Nombre_Determinacion}"?`;
            new bootstrap.Modal(deleteModal).show();
          } else {
            tr.remove();
          }
        });
        determinationsBody.appendChild(tr);
      }

      function updateDeterminations(idExamen) {
        const examenSeleccionado = examenes.find(e => e.id_examen == idExamen);
        if (!examenSeleccionado) return;

        idExamenSeleccionado = examenSeleccionado.id_examen;
        const idTipoMuestra = examenSeleccionado.idTipoMuestra;
        
        currentUnits = unidadesMedida;
        currentDeterminations = determinaciones.filter(d => d.id_examen == idExamen);

        determinationTitle.textContent = `Determinaciones para el examen: ${examenSeleccionado.nombre_examen}`;
        determinationTitle.classList.remove("hidden");
        determinationsBody.innerHTML = "";

        if (currentDeterminations.length === 0) {
          noDeterminations.classList.remove("hidden");
          determinationsTable.classList.add("hidden");
        } else {
          noDeterminations.classList.add("hidden");
          determinationsTable.classList.remove("hidden");
          currentDeterminations.forEach(d => addDeterminationRow(d));
        }
        addDeterminationButton.classList.remove("hidden");
        saveDeterminationsButton.classList.remove("hidden");
      }

      
      if (idExamenSeleccionado) {
        updateDeterminations(idExamenSeleccionado);
        const examenActual = examenes.find(e => e.id_examen == idExamenSeleccionado);
        if (examenActual) {
          searchInput.value = examenActual.nombre_examen;
        }
      }

      searchInput.addEventListener("input", () => {
        const searchTerm = searchInput.value.toLowerCase();
        suggestionsList.innerHTML = "";
        if (searchTerm.trim() === "") return;

        const filteredExams = examenes.filter(examen => 
          examen.nombre_examen.toLowerCase().includes(searchTerm) ||
          (examen.descripcion || "").toLowerCase().includes(searchTerm) ||
          (examen.codigo || "").toLowerCase().includes(searchTerm)
        );
        filteredExams.forEach(examen => {
          const li = document.createElement("li");
          li.innerHTML = `
            <strong>${examen.nombre_examen}</strong><br>
            <small>Descripción: ${examen.descripcion || 'Sin descripción'}</small><br>
            <small>Código: ${examen.codigo || 'Sin código'}</small>
          `;
          li.className = "list-group-item list-group-item-action";
          li.addEventListener("click", () => {
            searchInput.value = examen.nombre_examen;
            suggestionsList.innerHTML = "";
            updateDeterminations(examen.id_examen);
          });
          suggestionsList.appendChild(li);
        });
      });

      addDeterminationButton.addEventListener("click", () => {
        addDeterminationRow();
        noDeterminations.classList.add("hidden");
        determinationsTable.classList.remove("hidden");
      });
      
      saveDeterminationsButton.addEventListener("click", () => {
        const rows = determinationsBody.querySelectorAll("tr");
        const determinacionesArray = Array.from(rows).map(row => ({
          id_Determinacion: row.dataset.id || null,
          Nombre_Determinacion: row.querySelector('[name="Nombre_Determinacion"]').value,
          Unidad_Medida: row.querySelector('[name="Unidad_Medida"]').value,
          estado: parseInt(row.querySelector('[name="estado"]').value, 10),
        }));
        
        const modalContent = determinacionesArray.map((det, index) => `
          <strong>Determinación ${index + 1}:</strong><br>
          Nombre: ${det.Nombre_Determinacion}<br>
          Estado: ${det.estado === 1 ? "Activo" : "Inactivo"}<br><br>
        `).join("");

        document.getElementById("modalContent").innerHTML = modalContent;
        new bootstrap.Modal(document.getElementById('confirmationModal')).show();
      });
      
      confirmDeleteButton.addEventListener("click", async () => {
        if (!determinationToDelete) return;
        const idDeterminacion = determinationToDelete.dataset.id;
        try {
          const response = await fetch(`/determinacion/${idDeterminacion}`, { method: "DELETE" });
          const modalInstance = bootstrap.Modal.getInstance(deleteModal);
          modalInstance.hide();
          if (response.ok) {
            determinationToDelete.remove();
            messageContainer.className = 'alert alert-success';
            messageContainer.textContent = 'Determinación eliminada con éxito.';
          } else {
            throw new Error('Fallo al eliminar');
          }
        } catch (error) {
          console.error("Error al eliminar:", error);
          messageContainer.className = 'alert alert-danger';
          messageContainer.textContent = 'Error al eliminar la determinación.';
        }
        messageContainer.style.display = 'block';
        setTimeout(() => { messageContainer.style.display = 'none'; }, 5000);
      });
      
      document.getElementById("confirmSubmit").addEventListener("click", async () => {
        const modalInstance = bootstrap.Modal.getInstance(document.getElementById('confirmationModal'));
        if(modalInstance) modalInstance.hide();

        const rows = determinationsBody.querySelectorAll("tr");
        const determinacionesArray = Array.from(rows).map(row => ({
          id_Determinacion: row.dataset.id || null,
          Nombre_Determinacion: row.querySelector('[name="Nombre_Determinacion"]').value,
          Unidad_Medida: row.querySelector('[name="Unidad_Medida"]').value,
          estado: parseInt(row.querySelector('[name="estado"]').value, 10),
        }));

        try {
          const response = await fetch(`/determinacion/crear-determinacion/determinaciones`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              id_examen: idExamenSeleccionado,
              determinaciones: determinacionesArray
            }),
          });
          if (response.ok) {
            messageContainer.className = 'alert alert-success';
            messageContainer.textContent = 'Datos guardados y/o actualizados exitosamente.';
          } else {
            throw new Error('Fallo al guardar');
          }
        } catch (error) {
          console.error("Error al guardar:", error);
          messageContainer.className = 'alert alert-danger';
          messageContainer.textContent = 'Ocurrió un error al guardar las determinaciones.';
        }
        messageContainer.style.display = 'block';
        setTimeout(() => { messageContainer.style.display = 'none'; }, 5000);
      });
    });