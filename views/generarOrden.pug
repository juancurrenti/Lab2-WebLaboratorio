extends layout

block content

  title Crear Orden de Trabajo
  link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/4.6.0/css/bootstrap.min.css")
  style.

    body {
      background-image: url('/public/img/fondo.png');
      background-repeat: repeat;
      background-size: 200px;
    }
    
    .selected-exams-container {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      margin-top: 10px;
    }
    .selected-exam {
      display: flex;
      align-items: center;
      padding: 6px 12px;

      border-radius: 4px;
      border: 1px solid #ced4da;
      background-color: #f8f9fa;
      font-size: 0.9em;
      color: #212529;
    }
    .selected-exam span {
      margin-right: 8px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .selected-exam button {
      font-size: 16px;
      font-weight: bold;
      color: #6c757d;
      background-color: transparent;
      border: none;
      padding: 0;
      line-height: 1;
      cursor: pointer;
    }
    .selected-exam button:hover {
      color: #343a40;
    }
    .error-field {
      border-color: red !important;
    }

  .container-fluid
    h1(class="margin-top-custom") Crear Orden de Trabajo

    form#generar-orden-form(action="/orden/generacion-orden" method="POST")
      .form-group
        label(for="paciente") Paciente:
        if pacienteSeleccionado
          p #{pacienteSeleccionado.nombre} #{pacienteSeleccionado.apellido} (DNI: #{pacienteSeleccionado.dni})
          input(type="hidden" name="id_paciente" value=pacienteSeleccionado.id_paciente)
        else
          input#pacienteSearch.form-control(type="text" placeholder="Buscar paciente por nombre, apellido o DNI...")
          ul#pacienteResults.list-group
          input#selectedPaciente(name="id_paciente" type="hidden" required)
          #selectedPacienteContainer(style="display:none; margin-top: 10px;")
            p Paciente seleccionado: 
              strong#selectedPacienteLabel
            button#clearPacienteButton.btn.btn-sm.btn-outline-secondary(type="button") Limpiar

      .form-group
        label(for="diagnostico") Diagnóstico (Presuntivo):
        input#diagnostico.form-control(type="text" name="diagnostico")

      .form-group
        label(for="examenes") Exámenes:
        input#examSearch.form-control(type="text" placeholder="Buscar y agregar exámenes...")
        ul#examResults.list-group
        
        label.mt-2(for="examenes") Exámenes seleccionados:
        .selected-exams-container#selectedExamsList
        input#examenesSelectedIds(name="examenesSelectedIds" type="hidden")

      .form-group
        label(for="tiposMuestra") Tipos de Muestra Requeridos:
        #tiposMuestraContainer
          p.text-muted (Las muestras aparecerán aquí según los exámenes seleccionados)

      button#confirmarOrdenBtn.btn.btn-primary(type="button" data-bs-toggle="modal" data-bs-target="#confirmarModal") Confirmar Orden de Trabajo

      .modal.fade#confirmarModal(tabindex="-1" role="dialog" aria-labelledby="confirmarModalLabel" aria-hidden="true")
        .modal-dialog(role="document")
          .modal-content
            .modal-header
              h5.modal-title#confirmarModalLabel Confirmación de Orden de Trabajo
              button.btn-close(type="button" data-bs-dismiss="modal" aria-label="Close")
            .modal-body
              p: strong Paciente: 
              p#confirmPaciente
              p: strong Diagnóstico:
              p#confirmDiagnostico
              p: strong Exámenes seleccionados: 
              ul#confirmExamenes
              p: strong Tipos de Muestra: 
              ul#confirmTiposMuestra
            .modal-footer
              button.btn.btn-secondary(type="button" data-bs-dismiss="modal") Cerrar
              button.btn.btn-primary(type="submit" form="generar-orden-form") Generar Orden de Trabajo

  script.

    const examenes = !{JSON.stringify(examenes)};
    const pacientes = !{JSON.stringify(pacientes)};

    const pacienteSearchInput = document.getElementById("pacienteSearch");
    const pacienteResults = document.getElementById("pacienteResults");
    const selectedPaciente = document.getElementById("selectedPaciente");
    const selectedPacienteDNI = document.getElementById("selectedPacienteDNI");
    const selectedPacienteContainer = document.getElementById("selectedPacienteContainer");
    const selectedPacienteLabel = document.getElementById("selectedPacienteLabel");
    const clearPacienteButton = document.getElementById("clearPacienteButton");

    const examSearchInput = document.getElementById("examSearch");
    const examResults = document.getElementById("examResults");
    const selectedExamsList = document.getElementById("selectedExamsList");
    const examenesSelectedIdsInput = document.getElementById("examenesSelectedIds");
    const tiposMuestraContainer = document.getElementById("tiposMuestraContainer");
    const confirmarOrdenBtn = document.getElementById("confirmarOrdenBtn");


    const confirmPaciente = document.getElementById("confirmPaciente");
    const confirmDiagnostico = document.getElementById("confirmDiagnostico");
    const confirmExamenes = document.getElementById("confirmExamenes");
    const confirmTiposMuestra = document.getElementById("confirmTiposMuestra");

    pacienteSearchInput?.addEventListener("input", () => {
      const searchTerm = pacienteSearchInput.value.toLowerCase();
      pacienteResults.innerHTML = "";
      if (searchTerm === "") return;

      const filteredPacientes = pacientes.filter(paciente =>
        paciente.nombre.toLowerCase().includes(searchTerm) ||
        paciente.apellido.toLowerCase().includes(searchTerm) ||
        paciente.dni.toLowerCase().includes(searchTerm)
      );

      filteredPacientes.forEach(paciente => {
        const li = document.createElement("li");
        li.className = "list-group-item list-group-item-action";
        li.textContent = `${paciente.nombre} ${paciente.apellido} (DNI: ${paciente.dni})`;
        li.dataset.idPaciente = paciente.id_paciente;
        li.dataset.dniPaciente = paciente.dni;

        li.addEventListener("click", () => {
          selectedPaciente.value = li.dataset.idPaciente;
          if (selectedPacienteDNI) selectedPacienteDNI.value = li.dataset.dniPaciente;
          selectedPacienteLabel.textContent = li.textContent;
          pacienteSearchInput.style.display = "none";
          pacienteResults.innerHTML = "";
          selectedPacienteContainer.style.display = "block";
        });
        pacienteResults.appendChild(li);
      });
    });

    clearPacienteButton?.addEventListener("click", () => {
      selectedPaciente.value = "";
      if (selectedPacienteDNI) selectedPacienteDNI.value = "";
      selectedPacienteLabel.textContent = "";
      pacienteSearchInput.style.display = "block";
      selectedPacienteContainer.style.display = "none";
    });


    examSearchInput?.addEventListener("input", () => {
      const searchTerm = examSearchInput.value.toLowerCase();
      examResults.innerHTML = "";
      if (searchTerm === "") return;

      const filteredExams = examenes.filter(examen =>
        examen.nombre_examen.toLowerCase().includes(searchTerm)
      );

      filteredExams.forEach(examen => {
        const li = document.createElement("li");
        li.className = "list-group-item list-group-item-action";
        li.textContent = examen.nombre_examen;
        li.dataset.idExamen = examen.id_examen;

        li.addEventListener("click", () => {

          if (document.querySelector(`.selected-exam[data-id-examen="${examen.id_examen}"]`)) return;

          const div = document.createElement("div");
          div.className = "selected-exam";
          div.innerHTML = `<span>${examen.nombre_examen}</span><button type="button">✖</button>`;
          div.dataset.idExamen = examen.id_examen;

          div.querySelector("button").addEventListener("click", () => {
            div.remove();
            updateExamenesSelectedIds();
            updateTiposMuestra();
          });

          selectedExamsList.appendChild(div);
          updateExamenesSelectedIds();
          updateTiposMuestra();
          examSearchInput.value = "";
          examResults.innerHTML = "";
        });
        examResults.appendChild(li);
      });
    });

    function updateExamenesSelectedIds() {
      const selectedIds = Array.from(selectedExamsList.children).map(div => div.dataset.idExamen);
      examenesSelectedIdsInput.value = selectedIds.join(",");
    }

    function updateTiposMuestra() {
      const selectedExamIds = Array.from(selectedExamsList.children).map(div => parseInt(div.dataset.idExamen));
      const tiposMuestraRequeridos = new Map();

      selectedExamIds.forEach(id => {
        const examen = examenes.find(examen => examen.id_examen === id);
        if (examen && examen.tipoMuestra) {
          tiposMuestraRequeridos.set(examen.tipoMuestra.tipoDeMuestra, examen.tipoMuestra);
        }
      });

      tiposMuestraContainer.innerHTML = "";
      if (tiposMuestraRequeridos.size === 0) {
          tiposMuestraContainer.innerHTML = '<p class="text-muted">(Las muestras aparecerán aquí según los exámenes seleccionados)</p>';
          return;
      }

      tiposMuestraRequeridos.forEach(tipo => {
        const div = document.createElement("div");
        div.className = "form-check";
        const tipoId = tipo.tipoDeMuestra.replace(/\s+/g, '');
        
        div.innerHTML = `
          <input class="form-check-input" type="checkbox" name="tipos_muestra" value="${tipo.tipoDeMuestra}" id="check_${tipoId}">
          <label class="form-check-label" for="check_${tipoId}">${tipo.tipoDeMuestra}</label>
          <input type="hidden" name="estado_muestra_${tipo.tipoDeMuestra}" id="estado_${tipoId}" value="pendiente">
        `;
        tiposMuestraContainer.appendChild(div);

        const newCheckbox = div.querySelector(`#check_${tipoId}`);
        const hiddenInput = div.querySelector(`#estado_${tipoId}`);
        newCheckbox.addEventListener('change', () => {
          hiddenInput.value = newCheckbox.checked ? 'ingresada' : 'pendiente';
        });
      });
    }

    confirmarOrdenBtn?.addEventListener("click", () => {
      let isValid = true;
      if (!selectedPaciente.value && !document.querySelector('input[name="id_paciente"]').value) {
          pacienteSearchInput.classList.add("error-field");
          isValid = false;
      } else {
          if (pacienteSearchInput) pacienteSearchInput.classList.remove("error-field");
      }

      if (!isValid) {
        alert("Por favor, seleccione un paciente.");
        return;
      }

      confirmPaciente.textContent = selectedPacienteLabel.textContent || "#{pacienteSeleccionado ? pacienteSeleccionado.nombre + ' ' + pacienteSeleccionado.apellido : 'No seleccionado'}";
      confirmDiagnostico.textContent = document.getElementById("diagnostico").value || "Sin diagnóstico";

      confirmExamenes.innerHTML = "";
      Array.from(selectedExamsList.children).forEach(div => {
        const li = document.createElement("li");
        li.textContent = div.querySelector("span").textContent;
        confirmExamenes.appendChild(li);
      });
      if (confirmExamenes.innerHTML === "") {
        confirmExamenes.innerHTML = "<li>No se seleccionaron exámenes</li>";
      }

      confirmTiposMuestra.innerHTML = "";
      Array.from(tiposMuestraContainer.children).forEach(div => {
        const label = div.querySelector("label");
        if (label) {
            const estado = div.querySelector("input[type=hidden]").value;
            const li = document.createElement("li");
            li.textContent = `${label.textContent} - (Estado: ${estado})`;
            confirmTiposMuestra.appendChild(li);
        }
      });
      if (confirmTiposMuestra.innerHTML === "") {
        confirmTiposMuestra.innerHTML = "<li>No se requieren muestras</li>";
      }
    });