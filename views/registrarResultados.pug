extends layout

block content
  - const pageTitle = modificar ? 'Modificar Resultados' : 'Registrar Resultados'
  - const buttonText = modificar ? 'Guardar Cambios' : 'Guardar Resultados'
  - const buttonClass = modificar ? 'btn-warning' : 'btn-primary'
  
  .container-fluid 
    h1.text-center.mt-4= pageTitle

    if errorMessages && errorMessages.length > 0
      each msg in errorMessages
        .alert.alert-danger.text-center= msg

    if orden && orden.length > 0
      .row
        .col-lg-12
          h2 Orden: #{orden[0].OrdenID} - Paciente: #{orden[0].NombrePaciente} #{orden[0].ApellidoPaciente}
          p Edad: #{orden[0].EdadPaciente} años | Género: #{orden[0].SexoPaciente}

      form(method="POST" action="/orden/registrarResultados" id="registrarResultadosForm" class="mt-4")
        input(type="hidden" name="idOrden" value=orden[0].OrdenID)
        input(type="hidden" name="origen" value=origen)
        table.table.table-striped
          thead
            tr
              th Examen
              th Determinación
              th Unidad de Medida
              th Valor de Referencia
              th Género del Valor de Referencia
              th Resultado
          tbody
            each item in orden
              tr
                td= item.NombreExamen
                td= item.NombreDeterminacion
                td= item.UnidadMedidaDeterminacion
                td
                  - const unidadesCualitativas = ['Positivo / Negativo', 'Reactivo / No Reactivo', 'Ausencia / Presencia']
                  if unidadesCualitativas.includes(item.UnidadMedidaDeterminacion)
                    | Esperado: #{item.ValorEsperado}
                  else
                    | #{item.ValorReferenciaMinimo} - #{item.ValorReferenciaMaximo}
                td= item.SexoValorReferencia == 'M' ? 'Masculino' : (item.SexoValorReferencia == 'F' ? 'Femenino' : 'Ambos')
                td
                  if unidadesCualitativas.includes(item.UnidadMedidaDeterminacion)
                    select.form-select(
                      name=`resultado_${item.DeterminacionID}`,
                      data-determinacion=item.NombreDeterminacion,
                      data-examen=item.NombreExamen,
                      data-unidad=item.UnidadMedidaDeterminacion
                    )
                      option(value="" selected=(!item.ResultadoValor)) Seleccione...
                      - const opciones = item.UnidadMedidaDeterminacion.split(' / ')
                      each opcion in opciones
                        option(value=opcion selected=(item.ResultadoValor === opcion))= opcion
                  else
                    input.form-control(
                      type="number",
                      step="0.01",
                      min="0.00",
                      name=`resultado_${item.DeterminacionID}`,
                      placeholder="Ingrese resultado",
                      value=item.ResultadoValor || "",
                      data-determinacion=item.NombreDeterminacion,
                      data-examen=item.NombreExamen,
                      data-unidad=item.UnidadMedidaDeterminacion,
                      data-min=item.ValorReferenciaMinimo,
                      data-max=item.ValorReferenciaMaximo
                    )
                  input(type="hidden", name=`unidad_${item.DeterminacionID}`, value=item.UnidadMedidaDeterminacion)
                  input(type="hidden", name=`ref_max_${item.DeterminacionID}`, value=item.ValorReferenciaMaximo)

        button.btn.mt-3(type="button", class=buttonClass, data-bs-toggle="modal", data-bs-target="#confirmModal")= buttonText
        a.btn.btn-secondary.mt-3.ms-2(href="javascript:history.back()") Volver

      .modal.fade#confirmModal(tabindex="-1", aria-labelledby="confirmModalLabel", aria-hidden="true")
        .modal-dialog.modal-lg
          .modal-content
            .modal-header
              h5.modal-title#confirmModalLabel Confirmar Envío de Resultados
              button.btn-close(type="button", data-bs-dismiss="modal", aria-label="Close")
            .modal-body
              p Confirme los resultados que se enviarán para la orden:
              table.table.table-striped
                thead
                  tr
                    th Examen
                    th Determinación
                    th Unidad de Medida
                    th Resultado
                tbody#confirmTableBody
            .modal-footer
              button.btn.btn-secondary(type="button", data-bs-dismiss="modal") Cancelar
              button.btn.btn-primary(type="button", onclick="enviarFormulario();") Confirmar y Enviar
    else
      .row
        .col-lg-12.text-center
          p.text-muted No se encontraron resultados a analizar para esta orden.

  // --- INICIO DEL SCRIPT MODIFICADO PARA DIAGNÓSTICO ---
  script.
    function validarResultado(input) {
      if (input.type !== 'number') return;
      const min = parseFloat(input.dataset.min);
      const max = parseFloat(input.dataset.max);
      const valor = parseFloat(input.value);

      if (isNaN(valor)) {
        input.style.color = 'black';
        return;
      }

      if (valor < min || valor > max) {
        input.style.color = 'red';
      } else {
        input.style.color = 'black';
      }
    }

    document.addEventListener("DOMContentLoaded", () => {
      const inputsDeResultado = document.querySelectorAll("input[name^='resultado_']");
      inputsDeResultado.forEach(input => {
        validarResultado(input);
        input.addEventListener('input', () => {
          validarResultado(input);
        });
      });

      const form = document.getElementById("registrarResultadosForm");
      if (form) {
        const modalBodyTable = document.getElementById("confirmTableBody");
        const inputs = form.querySelectorAll("input[name^='resultado_'], select[name^='resultado_']");

        const updateModalTable = () => {
          modalBodyTable.innerHTML = "";
          
          console.log("Abriendo modal. Campos de resultado encontrados:", inputs.length);

          inputs.forEach(input => {
            console.log(`Revisando campo: ${input.name}, Valor: '${input.value}'`);
            
            if (input.value && input.value.trim() !== '') {
              const row = document.createElement("tr");
              const estiloColor = (input.style && input.style.color === 'red') ? 'style="color: red; font-weight: bold;"' : '';
              row.innerHTML = `
                <td>${input.dataset.examen}</td>
                <td>${input.dataset.determinacion}</td>
                <td>${input.dataset.unidad}</td>
                <td ${estiloColor}>${input.value}</td>
              `;
              modalBodyTable.appendChild(row);
            }
          });
        };

        const modalTrigger = document.querySelector("[data-bs-target='#confirmModal']");
        if (modalTrigger) {
          modalTrigger.addEventListener("click", updateModalTable);
        }
      }
    });

    function enviarFormulario() {
      document.getElementById("registrarResultadosForm").submit();
    }